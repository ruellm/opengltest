#version 330

/*layout (location = 0)*/out vec4 FragColor;
//layout (location = 1) out vec4 BrightColor;
                                      
in vec2 TexCoord;
in vec3 Normal;

uniform sampler2D gSampler;

uniform float alpha;
uniform int darken;

// for shadow implementation
uniform vec3 directionalLight;

in vec4 FragPosLightSpace;
uniform sampler2D shadowMap;

float ShadowCalculation(vec4 fragPosLightSpace)
{
	// perform perspective divide, transform the light-space fragment position
	// in clip-space (result of MVP multiplication) to normalized device //coordinates. Opengl automatically perform this in gl_position. As the //clip-space FragPosLightSpace is not passed to the fragment shader via //gl_Position we have to do this perspective divide ourselves:
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
	
    // transform to [0,1] range so we can map it as a texture coordinate.
    projCoords = projCoords * 0.5 + 0.5;
	
    // get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
    float closestDepth = texture(shadowMap, projCoords.xy).r; 
	
    // get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;
	
	// calculate bias (based on depth map resolution and slope)
    vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(-directionalLight);
	
	// calculate bias to avoid shadow acne
	float bias = max(0.05 * (1.0 - dot(norm, lightDir)), 0.005);  
		
	//float shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0;
	// PCF
	
	float shadow = 0.0;
    vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
    for(int x = -1; x <= 1; ++x)
    {
        for(int y = -1; y <= 1; ++y)
        {
            float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
            shadow += currentDepth - bias > pcfDepth  ? 1.0 : 0.0;        
        }    
    }
    shadow /= 9.0;
    
    // keep the shadow at 0.0 when outside the far_plane region of the light's frustum.
    if(projCoords.z > 1.0)
        shadow = 0.0;
	
    return shadow;
}

void main()                                                                   
{                                                                             
	vec4 localColor = texture(gSampler, TexCoord.xy);
	
	//temporary diffuse color of light
	vec3 directionalLightColor = vec3(1,1,1);
	
	//compute directional light
	vec3 norm = normalize(Normal);

	// negate the light direction so it will start from the fragment
	// and points to the light direction, and it will have the same 
	// orientation as our normal vector
	vec3 lightDir = normalize(-directionalLight);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * directionalLightColor * localColor.rgb;

	float shadow = ShadowCalculation(FragPosLightSpace);
	
	
	//Final formulatis (ambient + diffuse + specular) * color
	//explanation is materials (ambient, diffuse and specular) are for light and adding 
	//them means to accumulate the lights that will absorb and reflect by the object, t
	//to absorb and reflect by the color, these values are multiplied with texture color.
	
	vec4 ambient = localColor;//0.50 * localColor;
	
	//temporary handling
	//vec3 lighting = (ambient.xyz + (1.0 - shadow) * (diffuse /*+ specular*/)) * localColor.xyz;   
	vec3 lighting = localColor.xyz;
	if(shadow)
	{
		lighting = 0.5f * localColor.xyz;
	}
	
	FragColor =  vec4(lighting, 1.0);
	FragColor.a *= alpha;
}
